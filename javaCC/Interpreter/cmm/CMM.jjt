/*

本CMM.jj文件中的部分语法说明：

1.声明语句与赋值语句：必须先声明，后赋值。
  如："int a; a = 1;"为正确语法，而不能使用"int a = 1;"

2.数组的赋值：由于只有词法与语法分析，因此数组的赋值只能先统一声明，再对单个元素赋值的方法。
  如："real[] r; r[0] = 0; r[1] = 1;"

3.if-else语句：选择语句包含两种，含else的语句，与不含else的语句。
  如："if(){}"、"if(){}else{}"、"if(){}else if(){}else{}"均为正确语句，但"if(){}else if(){}"则无法识别。

4.算数运算符不含++、--等运算符。
*/


options {
    MULTI=true;
    NODE_EXTENDS="MyNode";
    TRACK_TOKENS=true;
}

PARSER_BEGIN(CMMParser)
package cmm;
import java.util.*;

public class CMMParser{

  public Node rootNode() {
    return jjtree.rootNode();
  }  
}

PARSER_END(CMMParser)

SKIP : {
    " "
    |  "\t"
    |  "\n"
    |  "\r"
    |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//定义关键字
TOKEN : {
	<IF: "if">
	| <ELSE: "else">
	| <WHILE: "while">
	| <READ: "read">
	| <WRITE: "write">
	| <INT: "int">
	| <REAL: "real">
}

//定义自然数
TOKEN : {
	<INTEGER_LITERAL: (["1"-"9"](<DIGIT>)* | "0")
	|
	("-"["1"-"9"](<DIGIT>)* | "0")>
}

//定义实数
TOKEN : {
	<REAL_LITERAL: (
	  "-"((<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+)
	)
	|
	(
	  (<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+	)>
}

//定义标识符
TOKEN : {
	<IDENTIFIER: <LETTER>
	| <LETTER>(<LETTER> | <DIGIT> | "_")*(<LETTER> | <DIGIT>)+>
	| <#LETTER: ["a"-"z", "A"-"Z"]>
	| <#DIGIT: ["0"-"9"]>
}


void Start() : {}
{
    Procedure()
    <EOF>
}

void Procedure()#void : {}
{
    (Statement())*
}

void Statement() #void: {}
{
    Declaration()
    | Assignment()
    | WhileStmt()
    | ReadStmt()
    | IfStmt()
    | WriteStmt()
    | Block()
}

void Block() : {}
{
    "{" (Statement())* "}"
}

void WhileStmt(): { } {
<WHILE> "(" Condition() ")" Block()
  }

void ReadStmt(): { } {
<READ>  Expression() ";"
  }

  void WriteStmt(): { } {
<WRITE> Expression() ";"
    }

void IfStmt() : {}
{

    LOOKAHEAD(<IF> "(" Condition() ")" Block())
    (<IF> "(" Condition() ")" Block() <ELSE>)+ Block()
    | <IF> "(" Condition() ")" Block()
}

void Condition()#void : {}
{
    EqualityExpression()
}

/** Equality expression. */
void EqualityExpression() #void :
{}
{
  RelationalExpression()
  (
     "==" RelationalExpression() #EQNode(2)
   |
     "<>" RelationalExpression() #NENode(2)
  )*
}

/** Relational expression. */
void RelationalExpression() #void :
{}
{
  Expression()
  (
    "<" Expression() #LTNode(2)
   |
    ">" Expression() #GTNode(2)
   |
    "<=" Expression() #LENode(2)
   |
    ">=" Expression() #GENode(2)
  )*
}

void Declaration()#void :
 {}
{
  (
   LOOKAHEAD(2)
  ScalarDeclaration()
  |
  FormDeclaration()
  )
  ";"
}

void ScalarDeclaration():
{Token t;  }
{
 (
< INT> { jjtThis.type = INT;}
|
< REAL>{jjtThis.type = REAL;}
)
t=< IDENTIFIER>
{jjtThis.name = t.image;
jjtThis.putInTable();}

}

void FormDeclaration():
{Token t,t2; }
{

(
< INT>"["[ t2 =<INTEGER_LITERAL> { jjtThis.count = Integer.parseInt(t2.image);}]"]"
  {jjtThis.type = INT;}
|
< REAL>"["[ t2 =<INTEGER_LITERAL>{ jjtThis.count = Integer.parseInt(t2.image);}]"]"
{jjtThis.type = REAL;}
)
t=< IDENTIFIER>
{jjtThis.name = t.image;
jjtThis.putInTable();}
}


void Assignment() #Assignment(2): {}
{
	Id() "=" Expression() ";"
	{jjtThis.check();
	}
}


void Expression()#void : {}
{
    ["-"]Term()
     (
        "+" Term() #AddNode(2)
     |
        "-" Term() #SubNode(2)
     )*
}

void Term()#void : {}
{
    Factor()
    (
      "*"  Factor() #MulNode(2)
    |
      "/" Factor() #DivNode(2)
    )*
}

void Factor()#void : {}
{
    Id() | Literal() | "(" Expression() ")"
}

void Id()#void:
{ }
{
LOOKAHEAD(2)
FormId()
|
ScalarId()
}

 void ScalarId():
 { Token t;}
 {
    t = <IDENTIFIER>
     { jjtThis.name = t.image; }
 }

 void FormId():
 {Token t1,t2; }
 {
   t1 = <IDENTIFIER>
   "["  t2 =<INTEGER_LITERAL> "]"
    { jjtThis.name = t1.image;
    jjtThis.index = Integer.parseInt(t2.image);}
 } 

void Literal() #void:
{Token t;}
{
  (
  t=<INTEGER_LITERAL>
    {
       jjtThis.val = Integer.parseInt(t.image);
    }
 )#IntConstNode
 |
(
  t = < REAL_LITERAL>
	{
       jjtThis.val = Double.parseDouble(t.image);
    }
)#RealConstNode
  }