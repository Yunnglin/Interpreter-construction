/* Generated By:JJTree: Do not edit this line. ASTAssignment.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package cmm;

import exception.*;

public class ASTAssignment extends SimpleNode {
	public ASTAssignment(int id) {
		super(id);
	}

	public ASTAssignment(CMMParser p, int id) {
		super(p, id);
	}

	public void interpret() {

	}

	public void check() throws SemanticError {
		SimpleNode child0 = (SimpleNode) jjtGetChild(0);
		SimpleNode child1 = (SimpleNode) jjtGetChild(1);
		if (child0 instanceof ASTScalarId) {
			Object val = symtab.get(((ASTScalarId) child0).name);
			Token token2 = ((ASTScalarId) child0).firstToken;
			if (val == null) {
				throw SemanticError.newIdentifierNotDefinedError(token2);
			}
			if (val instanceof Integer) {
				if (child1 instanceof ASTRealConstNode) {
					throw SemanticError.newTypeNotMatchError(token2);
				}
			}
		} else if (child0 instanceof ASTFormId) {
			Object val = symtab.get(((ASTFormId) child0).name);
			Token token = ((ASTFormId) child0).firstToken;
			if (val == null) {
				throw SemanticError.newIdentifierNotDefinedError(token);
			}
			int index = ((ASTFormId) child0).index;
			if (val instanceof int[]) {
				int size = ((int[]) val).length;
				if (index > size - 1) {
					throw SemanticError.newBoundryOutOfIndexError(token);
				}
				if(index <0) {
					throw SemanticError.newNegativeArraySizeError(token);
				}
				if (child1 instanceof ASTRealConstNode) {
					throw SemanticError.newTypeNotMatchError(token);
				}
			}
			if (val instanceof double[]) {
				int size = ((double[]) val).length;
				if (index > size - 1) {
					throw SemanticError.newBoundryOutOfIndexError(token);
				}
				if(index <0) {
					throw SemanticError.newNegativeArraySizeError(token);
				}
			}
		}
	}

}
/*
 * JavaCC - OriginalChecksum=7331ddf9e938a47872c7185039be69bf (do not edit this
 * line)
 */
