/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CMM.jj */
/*@egen*//*

\u93c8\u73fbMM.jj\u93c2\u56e6\u6b22\u6d93\ue160\u6b91\u95ae\u3125\u578e\u7487\ue15f\u7876\u7487\u5b58\u69d1\u951b\ufffd

1.\u6fb9\u7248\u69d1\u7487\ue15e\u5f5e\u6d93\u5ea4\u7974\u934a\u8270\ue1e2\u9359\u30ef\u7d30\u8e47\u5474\u300f\u934f\u581d\uff10\u93c4\u5eaf\u7d1d\u935a\u5ea4\u7974\u934a\u7b3a\ufffd\ufffd
  \u6fe1\u50a6\u7d30"int a; a = 1;"\u6d93\u70d8\ue11c\u7ead\ue1bf\ue1e2\u5a09\u66ea\u7d1d\u9470\u5c7c\u7b09\u9473\u6212\u5a07\u9422\ufffd"int a = 1;"

2.\u93c1\u626e\u7c8d\u9428\u52ee\u7974\u934a\u7877\u7d30\u9422\u53d8\u7c2c\u9359\ue045\u6e41\u7487\u5d86\u7876\u6d93\u5ea4\ue1e2\u5a09\u66de\u578e\u93cb\u6136\u7d1d\u9365\u72b3\ue11d\u93c1\u626e\u7c8d\u9428\u52ee\u7974\u934a\u714e\u5f67\u9473\u85c9\u539b\u7f01\u71b6\u7af4\u6fb9\u7248\u69d1\u951b\u5c7d\u5540\u7035\u7470\u5d1f\u6d93\ue044\u5393\u7ef1\u72ba\u7974\u934a\u80a9\u6b91\u93c2\u89c4\u7876\u9286\ufffd
  \u6fe1\u50a6\u7d30"real[] r; r[0] = 0; r[1] = 1;"

3.if-else\u7487\ue15e\u5f5e\u951b\u6c36\ufffd\u590b\u5ae8\u7487\ue15e\u5f5e\u9356\u546d\u60c8\u6d93\u3087\ue752\u951b\u5c7d\u60c8else\u9428\u52ee\ue1e2\u9359\u30ef\u7d1d\u6d93\u5e9d\u7b09\u935a\u73a1lse\u9428\u52ee\ue1e2\u9359\u30e3\ufffd\ufffd
  \u6fe1\u50a6\u7d30"if(){}"\u9286\ufffd"if(){}else{}"\u9286\ufffd"if(){}else if(){}else{}"\u9367\u56e6\u8d1f\u59dd\uff47\u2018\u7487\ue15e\u5f5e\u951b\u5c7c\u7d7e"if(){}else if(){}"\u9352\u6b10\u68e4\u5a09\u66e1\u7611\u9352\ue0a0\ufffd\ufffd

4.\u7ee0\u6941\u669f\u6769\u612e\u757b\u7ed7\ufe3f\u7b09\u935a\ufffd++\u9286\ufffd--\u7edb\u590e\u7e4d\u7ee0\u6943\ue0c1\u9286\ufffd
*/


options {
               
                          
                      
}

PARSER_BEGIN(CMMParser)
package cmm;
import java.util.*;

public class CMMParser/*@bgen(jjtree)*/implements CMMParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTCMMParserState jjtree = new JJTCMMParserState();

/*@egen*/

  public Node rootNode() {
    return jjtree.rootNode();
  }  
}

PARSER_END(CMMParser)

SKIP : {
    " "
    |  "\t"
    |  "\n"
    |  "\r"
    |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

//\u7039\u6c2b\u7b9f\u934f\u62bd\u656d\u701b\ufffd
TOKEN : {
	<IF: "if">
	| <ELSE: "else">
	| <WHILE: "while">
	| <READ: "read">
	| <WRITE: "write">
	| <INT: "int">
	| <REAL: "real">
}

//\u7039\u6c2b\u7b9f\u9477\ue046\u52a7\u93c1\ufffd
TOKEN : {
	<INTEGER_LITERAL: (["1"-"9"](<DIGIT>)* | "0")
	|
	("-"["1"-"9"](<DIGIT>)* | "0")>
}

//\u7039\u6c2b\u7b9f\u7039\u70b4\u669f
TOKEN : {
	<REAL_LITERAL: (
	  "-"((<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+)
	)
	|
	(
	  (<DIGIT>)+
	| (<DIGIT>)+"."
	| (<DIGIT>)+"."(<DIGIT>)+
	| "."(<DIGIT>)+	)>
}

//\u7039\u6c2b\u7b9f\u93cd\u56ea\u7611\u7ed7\ufffd
TOKEN : {
	<IDENTIFIER: <LETTER>
	| <LETTER>(<LETTER> | <DIGIT> | "_")*(<LETTER> | <DIGIT>)+>
	| <#LETTER: ["a"-"z", "A"-"Z"]>
	| <#DIGIT: ["0"-"9"]>
}


void Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    Procedure()
    <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Procedure()      : {}
{
    (Statement())*
}

void Statement()      : {}
{
    Declaration()
    | Assignment()
    | WhileStmt()
    | ReadStmt()
    | IfStmt()
    | WriteStmt()
    | Block()
}

void Block() : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    "{" (Statement())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void WhileStmt(): {/*@bgen(jjtree) WhileStmt */
  ASTWhileStmt jjtn000 = new ASTWhileStmt(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ } {/*@bgen(jjtree) WhileStmt */
try {
/*@egen*/
<WHILE> "(" Condition() ")" Block()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
  }

void ReadStmt(): {/*@bgen(jjtree) ReadStmt */
  ASTReadStmt jjtn000 = new ASTReadStmt(JJTREADSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ } {/*@bgen(jjtree) ReadStmt */
try {
/*@egen*/
<READ>  Expression() ";"/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
  }

  void WriteStmt(): {/*@bgen(jjtree) WriteStmt */
  ASTWriteStmt jjtn000 = new ASTWriteStmt(JJTWRITESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ } {/*@bgen(jjtree) WriteStmt */
try {
/*@egen*/
<WRITE> Expression() ";"/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
    }

void IfStmt() : {/*@bgen(jjtree) IfStmt */
  ASTIfStmt jjtn000 = new ASTIfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
    try {
/*@egen*/

    LOOKAHEAD(<IF> "(" Condition() ")" Block())
    (<IF> "(" Condition() ")" Block() <ELSE>)+ Block()
    | <IF> "(" Condition() ")" Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Condition()      : {}
{
    EqualityExpression()
}

/** Equality expression. */
void EqualityExpression()       :
{}
{
  RelationalExpression()
  (
     "=="/*@bgen(jjtree) #EQNode( 2) */
          {
            ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           
   |
     "<>"/*@bgen(jjtree) #NENode( 2) */
          {
            ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           
  )*
}

/** Relational expression. */
void RelationalExpression()       :
{}
{
  Expression()
  (
    "<"/*@bgen(jjtree) #LTNode( 2) */
        {
          ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/           
   |
    ">"/*@bgen(jjtree) #GTNode( 2) */
        {
          ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/           
   |
    "<="/*@bgen(jjtree) #LENode( 2) */
         {
           ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             throw (RuntimeException)jjte003;
           }
           if (jjte003 instanceof ParseException) {
             throw (ParseException)jjte003;
           }
           throw (Error)jjte003;
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/           
   |
    ">="/*@bgen(jjtree) #GENode( 2) */
         {
           ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             throw (RuntimeException)jjte004;
           }
           if (jjte004 instanceof ParseException) {
             throw (ParseException)jjte004;
           }
           throw (Error)jjte004;
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
             jjtn004.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/           
  )*
}

void Declaration()      :
 {}
{
  (
   LOOKAHEAD(2)
  ScalarDeclaration()
  |
  FormDeclaration()
  )
  ";"
}

void ScalarDeclaration():
{/*@bgen(jjtree) ScalarDeclaration */
 ASTScalarDeclaration jjtn000 = new ASTScalarDeclaration(JJTSCALARDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;  }
{/*@bgen(jjtree) ScalarDeclaration */
 try {
/*@egen*/
 (
< INT> { jjtn000.type = INT;}
|
< REAL>{jjtn000.type = REAL;}
)
t=< IDENTIFIER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
}
/*@egen*/
{jjtn000.name = t.image;
jjtn000.putInTable();}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/

}

void FormDeclaration():
{/*@bgen(jjtree) FormDeclaration */
 ASTFormDeclaration jjtn000 = new ASTFormDeclaration(JJTFORMDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t,t2; }
{/*@bgen(jjtree) FormDeclaration */
try {
/*@egen*/

(
< INT>"["[ t2 =<INTEGER_LITERAL> { jjtn000.count = Integer.parseInt(t2.image);}]"]"
  {jjtn000.type = INT;}
|
< REAL>"["[ t2 =<INTEGER_LITERAL>{ jjtn000.count = Integer.parseInt(t2.image);}]"]"
{jjtn000.type = REAL;}
)
t=< IDENTIFIER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
}
/*@egen*/
{jjtn000.name = t.image;
jjtn000.putInTable();}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}


void Assignment()               : {/*@bgen(jjtree) #Assignment( 2) */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #Assignment( 2) */
        try {
/*@egen*/
	Id() "=" Expression() ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000,  2);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{jjtn000.check();
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void Expression()      : {}
{
    ["-"]Term()
     (
        "+"/*@bgen(jjtree) #AddNode( 2) */
            {
              ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ Term()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtn001.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/            
     |
        "-"/*@bgen(jjtree) #SubNode( 2) */
            {
              ASTSubNode jjtn002 = new ASTSubNode(JJTSUBNODE);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ Term()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/            
     )*
}

void Term()      : {}
{
    Factor()
    (
      "*"/*@bgen(jjtree) #MulNode( 2) */
           {
             ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/  Factor()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/            
    |
      "/"/*@bgen(jjtree) #DivNode( 2) */
          {
            ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/            
    )*
}

void Factor()      : {}
{
    Id() | Literal() | "(" Expression() ")"
}

void Id()     :
{ }
{
LOOKAHEAD(2)
FormId()
|
ScalarId()
}

 void ScalarId():
 {/*@bgen(jjtree) ScalarId */
   ASTScalarId jjtn000 = new ASTScalarId(JJTSCALARID);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t;}
 {/*@bgen(jjtree) ScalarId */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/
     { jjtn000.name = t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
 }

 void FormId():
 {/*@bgen(jjtree) FormId */
  ASTFormId jjtn000 = new ASTFormId(JJTFORMID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t1,t2; }
 {/*@bgen(jjtree) FormId */
   try {
/*@egen*/
   t1 = <IDENTIFIER>
   "["  t2 =<INTEGER_LITERAL> "]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { jjtn000.name = t1.image;
    jjtn000.index = Integer.parseInt(t2.image);}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
 } 

void Literal()      :
{Token t;}
{/*@bgen(jjtree) IntConstNode */
  {
    ASTIntConstNode jjtn001 = new ASTIntConstNode(JJTINTCONSTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  (
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
       jjtn001.val = Integer.parseInt(t.image);
    }
 )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/             
 |/*@bgen(jjtree) RealConstNode */
{
  ASTRealConstNode jjtn002 = new ASTRealConstNode(JJTREALCONSTNODE);
  boolean jjtc002 = true;
  jjtree.openNodeScope(jjtn002);
  jjtn002.jjtSetFirstToken(getToken(1));
}
try {
/*@egen*/
(
  t = < REAL_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtn002.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
       jjtn002.val = Double.parseDouble(t.image);
    }
)/*@bgen(jjtree)*/
} finally {
  if (jjtc002) {
    jjtree.closeNodeScope(jjtn002, true);
    jjtn002.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/              
  }